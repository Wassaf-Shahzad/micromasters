# Generated by Django 2.1.2 on 2019-01-15 12:04


import json

from django.core.serializers.json import DjangoJSONEncoder
from django.db import migrations

from wagtail.core.rich_text import RichText


def page_to_streamfield(page):
    changed = False
    if page.content.raw_text and not page.content:
        page.content = [('rich_text', RichText(page.content.raw_text))]
        changed = True
    return page, changed


def pagerevision_to_streamfield(revision_data):
    changed = False
    content = revision_data.get('content')
    if content:
        try:
            json.loads(content)
        except ValueError:
            revision_data['content'] = json.dumps(
                [{
                    "value": content,
                    "type": "rich_text"
                }],
                cls=DjangoJSONEncoder)
            changed = True
        else:
            # It's already valid JSON. Leave it.
            pass
    return revision_data, changed


def page_to_richtext(page):
    changed = False
    if page.content.raw_text is None:
        raw_text = ''.join([
            child.value.source for child in page.content
            if child.block_type == 'rich_text'
        ])
        page.content = raw_text
        changed = True
    return page, changed


def pagerevision_to_richtext(revision_data):
    changed = False
    content = revision_data.get('content', 'definitely non-JSON string')
    if content:
        try:
            content_data = json.loads(content)
        except ValueError:
            # It's not apparently a StreamField. Leave it.
            pass
        else:
            raw_text = ''.join([
                child['value'] for child in content_data
                if child['type'] == 'rich_text'
            ])
            revision_data['content'] = raw_text
            changed = True
    return revision_data, changed


def convert(apps, schema_editor, page_converter, pagerevision_converter):
    ProgramTabPage = apps.get_model("cms", "ProgramTabPage")
    for page in ProgramTabPage.objects.all():

        page, changed = page_converter(page)
        if changed:
            page.save()

        for revision in page.revisions.all():
            revision_data = json.loads(revision.content_json)
            revision_data, changed = pagerevision_converter(revision_data)
            if changed:
                revision.content_json = json.dumps(revision_data, cls=DjangoJSONEncoder)
                revision.save()


def convert_to_streamfield(apps, schema_editor):
    return convert(apps, schema_editor, page_to_streamfield, pagerevision_to_streamfield)


def convert_to_richtext(apps, schema_editor):
    return convert(apps, schema_editor, page_to_richtext, pagerevision_to_richtext)


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0034_alter_content_feild'),
    ]

    operations = [
        migrations.RunPython(
            convert_to_streamfield,
            convert_to_richtext,
        ),
    ]
